/**
 * AI AGENTS FIRST - ManyChat Webhook Handler
 * Every response generated by actual AI agents, not templates
 * Developer: tasimaditheto
 */

const { getOpenAIClient } = require("../lib/config/openai");

module.exports = async (req, res) => {
  // Enable CORS
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");

  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }

  try {
    // Handle GET requests (info page)
    if (req.method === "GET") {
      return res.status(200).json({
        project: "WhatsApp AI Tutor - CAPS Curriculum Aligned",
        message: "üéâ TRUE AI AGENTS FIRST ARCHITECTURE!",
        status: "‚úÖ LIVE AND WORKING!",
        developer: "tasimaditheto",
        architecture: {
          approach: "AI Agents First - NO TEMPLATES",
          every_response: "Generated by actual AI agents",
          conversation_flow: "Intelligent AI-to-AI coordination",
          curriculum: "South African CAPS Aligned",
        },
        ai_agents: {
          brain_manager: "Routes and coordinates all interactions",
          homework_agent: "Solves problems step-by-step",
          practice_agent: "Generates CAPS questions",
          papers_agent: "Provides exam resources",
        },
      });
    }

    // Handle POST requests (ManyChat webhook)
    if (req.method === "POST") {
      console.log(
        "üì® ManyChat webhook received:",
        JSON.stringify(req.body, null, 2)
      );

      const webhookData = req.body || {};

      // Extract student information
      const student = {
        subscriber_id:
          webhookData.subscriber_id || webhookData.psid || "unknown",
        first_name: webhookData.first_name || "Student",
        message:
          webhookData.message ||
          webhookData.text ||
          webhookData.last_input_text ||
          "Hello",
      };

      // Auto-generate echo if missing
      let echo =
        webhookData.echo || `auto_${Date.now()}_${student.subscriber_id}`;

      console.log(
        `üë§ Student: ${student.first_name} (${student.subscriber_id})`
      );
      console.log(`üí¨ Message: "${student.message}"`);

      // üß† CALL ACTUAL AI BRAIN MANAGER AGENT
      const brainResponse = await callBrainManagerAgent(student);

      // üì§ FORMAT RESPONSE FOR MANYCHAT
      const response = {
        echo: echo,
        message: brainResponse.message,
        version: "v2",
        content: {
          messages: [{ type: "text", text: brainResponse.message }],
          quick_replies: brainResponse.quick_replies || [],
        },
        ai_agent_used: brainResponse.agent,
        timestamp: new Date().toISOString(),
      };

      console.log("üì§ AI Agent Response:", brainResponse.agent);
      return res.status(200).json(response);
    }

    return res.status(405).json({ error: "Method not allowed" });
  } catch (error) {
    console.error("‚ùå AI Agents error:", error);

    const echo = req.body?.echo || `error_${Date.now()}`;

    return res.status(200).json({
      echo: echo,
      message:
        "I'm having trouble processing your request right now. Please try again! ü§ñ",
      version: "v2",
      content: {
        messages: [
          {
            type: "text",
            text: "I'm having trouble processing your request right now. Please try again! ü§ñ",
          },
        ],
      },
      error: true,
      timestamp: new Date().toISOString(),
    });
  }
};

// üß† ACTUAL AI BRAIN MANAGER AGENT
async function callBrainManagerAgent(student) {
  try {
    const openai = getOpenAIClient();

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      temperature: 0.7,
      max_tokens: 400,
      messages: [
        {
          role: "system",
          content: `You are the Brain Manager Agent for a WhatsApp AI tutor system. You coordinate with specialized educational agents.

YOUR ROLE:
- First contact with students on WhatsApp
- Intelligently gather their educational needs through conversation
- Determine when to route to specialist agents: Homework Agent, Practice Agent, Past Papers Agent
- Maintain natural, engaging WhatsApp conversation style

CONTEXT:
- Student: ${student.first_name}
- Message: "${student.message}"
- Platform: WhatsApp (keep responses conversational)
- Curriculum: South African CAPS aligned

RESPONSE GUIDELINES:
- Be encouraging and supportive
- Ask follow-up questions to understand needs
- Use emojis naturally (this is WhatsApp)
- Keep responses friendly but focused
- If student needs specific help, gather details before routing

Respond as the Brain Manager Agent would in a natural WhatsApp conversation.`,
        },
        {
          role: "user",
          content: `Student ${student.first_name} says: "${student.message}"`,
        },
      ],
    });

    const aiResponse = completion.choices[0].message.content;

    // Analyze if Brain Manager should route to specialist
    const routingDecision = await analyzeBrainRouting(
      student.message,
      aiResponse
    );

    // If routing to specialist, call that agent
    if (
      routingDecision.should_route &&
      routingDecision.target_agent !== "continue_brain"
    ) {
      return await callSpecialistAgent(
        routingDecision.target_agent,
        student,
        aiResponse
      );
    }

    return {
      agent: "brain_manager",
      message: aiResponse,
      routing_decision: routingDecision,
      quick_replies: routingDecision.suggest_quick_replies
        ? [
            { title: "üìö Homework Help", payload: "homework_help" },
            { title: "üìù Practice Questions", payload: "practice_questions" },
            { title: "üìÑ Past Papers", payload: "past_papers" },
          ]
        : [],
    };
  } catch (error) {
    console.error("‚ùå Brain Manager Agent error:", error);
    return {
      agent: "brain_manager",
      message: `Hi ${student.first_name}! I'm here to help with your studies. What do you need help with today? üìö`,
      error: true,
    };
  }
}

// üîÑ BRAIN ROUTING ANALYSIS
async function analyzeBrainRouting(userMessage, brainResponse) {
  try {
    const openai = getOpenAIClient();

    const analysis = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      temperature: 0.3,
      max_tokens: 100,
      messages: [
        {
          role: "system",
          content:
            'Analyze if the Brain Manager should route to a specialist agent or continue gathering information. Respond with JSON: {"should_route": boolean, "target_agent": "homework|practice|papers|continue_brain", "suggest_quick_replies": boolean, "reasoning": "brief explanation"}',
        },
        {
          role: "user",
          content: `User: "${userMessage}"\nBrain Response: "${brainResponse}"`,
        },
      ],
    });

    return JSON.parse(analysis.choices[0].message.content);
  } catch (error) {
    return {
      should_route: false,
      target_agent: "continue_brain",
      suggest_quick_replies: true,
      reasoning: "Analysis error",
    };
  }
}

// üéì CALL SPECIALIST AGENTS
async function callSpecialistAgent(agentType, student, context) {
  const openai = getOpenAIClient();

  let systemPrompt = "";

  switch (agentType) {
    case "homework":
      systemPrompt = `You are the Homework Agent specialist. You provide step-by-step homework help for South African CAPS curriculum students.

CAPABILITIES:
- Solve homework problems step-by-step
- Explain concepts clearly
- Adapt to student's grade level
- Use CAPS curriculum context

STUDENT: ${student.first_name}
CONTEXT: ${context}

Provide helpful, educational responses that guide learning.`;
      break;

    case "practice":
      systemPrompt = `You are the Practice Agent specialist. You generate CAPS-aligned practice questions for South African students.

CAPABILITIES:
- Create practice questions by grade and subject
- Align with CAPS curriculum
- Provide varying difficulty levels
- Generate relevant exercises

STUDENT: ${student.first_name}
CONTEXT: ${context}

Generate engaging practice questions and exercises.`;
      break;

    case "papers":
      systemPrompt = `You are the Past Papers Agent specialist. You help with exam preparation for South African CAPS curriculum.

CAPABILITIES:
- Provide past exam papers information
- Share exam strategies
- Offer memorandum insights
- Guide exam preparation

STUDENT: ${student.first_name}
CONTEXT: ${context}

Help with exam preparation and past papers.`;
      break;

    default:
      return {
        agent: "error",
        message: `Hi ${student.first_name}! I had trouble connecting to the right specialist. Can you tell me what you need help with? üìö`,
      };
  }

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      temperature: 0.6,
      max_tokens: 500,
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: student.message },
      ],
    });

    return {
      agent: `${agentType}_specialist`,
      message: completion.choices[0].message.content,
    };
  } catch (error) {
    console.error(`‚ùå ${agentType} Agent error:`, error);
    return {
      agent: `${agentType}_specialist`,
      message: `Hi ${student.first_name}! I'm your ${agentType} specialist, but I'm having trouble right now. Please try again! üìö`,
      error: true,
    };
  }
}
